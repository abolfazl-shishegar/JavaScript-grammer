digraph G {
  "Program" -> "StatementList";
  "StatementList" -> "Statement";
  "StatementList" -> "Statement ; StatementList";
  "Statement" -> "VariableDeclaration";
  "Statement" -> "IfStatement";
  "Statement" -> "WhileStatement";
  "Statement" -> "FunctionDeclaration";
  "Statement" -> "ExpressionStatement";
  "Statement" -> "EqualityOperator";
  "Statement" -> "RelationalOperator";
  "Statement" -> "AdditiveOperator";
  "Statement" -> "MultiplicativeOperator";
  "VariableDeclaration" -> "let Identifier = Expression";
  "IfStatement" -> "if ( Expression ) { StatementList }";
  "IfStatement" -> "if ( Expression ) { StatementList } else { StatementList }";
  "WhileStatement" -> "while ( Expression ) { StatementList }";
  "FunctionDeclaration" -> "function Identifier( ParameterList ) { StatementList}";
  "ParameterList" -> "ε";
  "ParameterList" -> "IdentifierList";
  "IdentifierList" -> "Identifier";
  "IdentifierList" -> "Identifier, IdentifierList";
  "ExpressionStatement" -> "Expression";
  "Expression" -> "AssignmentExpression";
  "AssignmentExpression" -> "LogicalOrExpression";
  "AssignmentExpression" -> "LogicalOrExpression = AssignmentExpression";
  "LogicalOrExpression" -> "LogicalAndExpression";
  "LogicalOrExpression" -> "LogicalOrExpression || LogicalAndExpression";
  "LogicalAndExpression" -> "EqualityExpression";
  "LogicalAndExpression" -> "LogicalAndExpression && EqualityExpression";
  "EqualityExpression" -> "RelationalExpression";
  "EqualityExpression" -> "EqualityExpression EqualityOperator RelationalExpression";
  "EqualityOperator" -> "==";
  "EqualityOperator" -> "!=";
  "RelationalExpression" -> "AdditiveExpression";
  "RelationalExpression" -> "RelationalExpression RelationalOperator AdditiveExpression";
  "RelationalOperator" -> "<";
  "RelationalOperator" -> "<=";
  "RelationalOperator" -> ">";
  "RelationalOperator" -> ">=";
  "AdditiveExpression" -> "MultiplicativeExpression";
  "AdditiveExpression" -> "AdditiveExpression AdditiveOperator MultiplicativeExpression";
  "AdditiveOperator" -> "+";
  "AdditiveOperator" -> "-";
  "MultiplicativeExpression" -> "UnaryExpression";
  "MultiplicativeExpression" -> "MultiplicativeExpression MultiplicativeOperator UnaryExpression";
  "MultiplicativeOperator" -> "*";
  "MultiplicativeOperator" -> "/";
  "UnaryExpression" -> "PrimaryExpression";
  "UnaryExpression" -> "! UnaryExpression";
  "UnaryExpression" -> "- UnaryExpression";
  "PrimaryExpression" -> "Literal";
  "PrimaryExpression" -> "( AssignmentExpression )";
  "PrimaryExpression" -> "Identifier";
  "PrimaryExpression" -> "FunctionCall";
  "Literal" -> "BooleanLiteral";
  "Literal" -> "NumericLiteral";
  "Literal" -> "StringLiteral";
  "BooleanLiteral" -> "true";
  "BooleanLiteral" -> "false";
  "NumericLiteral" -> "[0-9]+";
  "StringLiteral" -> "\"[^\"]*\"";
  "StringLiteral" -> "'[^']*'";
  "Identifier" -> "[a-zA-Z_][a-zA-Z0-9_]*";
  "FunctionCall" -> "Identifier( ArgumentList )";
  "ArgumentList" -> "ε";
  "ArgumentList" -> "AssignmentExpression";
  "ArgumentList" -> "AssignmentExpression, ArgumentList";
}
